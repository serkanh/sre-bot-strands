# Service Configuration
SERVICE_MODE=api  # or "web"
PORT=8000

# AWS Configuration
AWS_REGION=us-east-1

# Option 1: Use AWS Profile (recommended for local development)
# Uncomment and set your AWS profile name (requires ~/.aws folder with credentials)
# AWS_PROFILE=your_profile_name

# Option 2: Use AWS Access Keys (for environments without AWS CLI configured)
# Uncomment and set your AWS credentials
# AWS_ACCESS_KEY_ID=your_access_key_here
# AWS_SECRET_ACCESS_KEY=your_secret_key_here

# Note: If AWS_PROFILE is set, it takes precedence over access keys

# Bedrock Configuration
# Use inference profile instead of direct model ID (required by AWS Bedrock)
BEDROCK_MODEL_ID=us.anthropic.claude-sonnet-4-5-20250929-v1:0

# Application Configuration
SESSION_STORAGE_PATH=./sessions
LOG_LEVEL=INFO

# MCP Configuration
FASTMCP_LOG_LEVEL=ERROR  # Control MCP server logging (ERROR, WARNING, INFO, DEBUG)

# Kubernetes Configuration
# For K3s local testing, set this to the K3s kubeconfig path
# For AWS EKS, leave empty and ensure kubectl is configured with EKS cluster
KUBECONFIG=/app/k3s_data/kubeconfig/kubeconfig.yaml

# EKS MCP Configuration
# WARNING: These flags enable write operations and sensitive data access
# Use with caution in production environments

# Enable write operations (create, update, delete resources)
EKS_MCP_ALLOW_WRITE=false

# Enable access to sensitive data (logs, secrets, events)
EKS_MCP_ALLOW_SENSITIVE_DATA=false

# Usage:
# - For local K3s testing: Set KUBECONFIG to K3s path, enable both flags for full testing
# - For AWS EKS read-only: Leave KUBECONFIG empty, keep flags as false
# - For AWS EKS management: Leave KUBECONFIG empty, set flags to true as needed
