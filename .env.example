# Service Configuration
SERVICE_MODE=api  # or "web"
PORT=8000

# AWS Configuration
AWS_REGION=us-east-1

# Option 1: Use AWS Profile (recommended for local development)
# Uncomment and set your AWS profile name (requires ~/.aws folder with credentials)
# AWS_PROFILE=your_profile_name

# Option 2: Use AWS Access Keys (for environments without AWS CLI configured)
# Uncomment and set your AWS credentials
# AWS_ACCESS_KEY_ID=your_access_key_here
# AWS_SECRET_ACCESS_KEY=your_secret_key_here

# Note: If AWS_PROFILE is set, it takes precedence over access keys

# Bedrock Configuration
# Use inference profile instead of direct model ID (required by AWS Bedrock)
BEDROCK_MODEL_ID=us.anthropic.claude-sonnet-4-5-20250929-v1:0

# Application Configuration
SESSION_STORAGE_PATH=./sessions
LOG_LEVEL=INFO

# MCP Configuration
FASTMCP_LOG_LEVEL=ERROR  # Control MCP server logging (ERROR, WARNING, INFO, DEBUG)

# Kubernetes Configuration (optional)
# Set this to your kubeconfig path for Kubernetes cluster access
# Works with both K3s (local) and EKS (production) clusters
# If not set, will try to use default kubeconfig or in-cluster config
KUBECONFIG=./k3s_data/kubeconfig/kubeconfig.yaml

# Usage:
# - For local K3s: Set KUBECONFIG to K3s kubeconfig path (e.g., ./k3s_data/kubeconfig/kubeconfig.yaml)
# - For AWS EKS: Run 'aws eks update-kubeconfig --name <cluster-name>' and leave KUBECONFIG empty
# - For in-cluster: Leave KUBECONFIG empty when running inside a Kubernetes pod
