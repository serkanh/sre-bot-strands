services:
  # K3s Kubernetes Server for local testing
  k3s-server:
    image: rancher/k3s:latest
    container_name: sre-bot-k3s
    command:
      - server
      - --kube-apiserver-arg=feature-gates=AllAlpha=false
      - --kubelet-arg=seccomp-default=false
      - --tls-san=sre-bot-k3s
      - --tls-san=k3s-server
    tmpfs:
    - /run
    - /var/run
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    privileged: true
    restart: unless-stopped
    security_opt:
      - seccomp=unconfined
      - apparmor=unconfined
    environment:
    - K3S_KUBECONFIG_OUTPUT=/output/kubeconfig.yaml
    - K3S_KUBECONFIG_MODE=666
    - K3S_KUBECONFIG_FORCE_OVERWRITE=true
    - K3S_TOKEN=sre-bot-k3s-token
    volumes:
    - k3s-server:/var/lib/rancher/k3s
    - ./k3s_data/kubeconfig:/output
    - ./k3s_data/docker_images:/var/lib/rancher/k3s/agent/images
    ports:
    - "6443:6443"  # Kubernetes API Server
    - "80:80"      # Ingress controller
    - "443:443"    # Ingress controller HTTPS
    networks:
    - sre-bot-network
    healthcheck:
      test: ["CMD", "kubectl", "get", "nodes"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # API Service - Strict API mode without CORS or static files
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sre-bot-api
    environment:
      - SERVICE_MODE=api
      - PORT=8000
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_PROFILE=${AWS_PROFILE:-}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - BEDROCK_MODEL_ID=${BEDROCK_MODEL_ID:-anthropic.claude-3-5-sonnet-20241022-v2:0}
      - SESSION_STORAGE_PATH=/app/sessions
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - KUBECONFIG=${KUBECONFIG:-}
    ports:
      - "8000:8000"
    volumes:
      - ./sessions:/app/sessions
      - ./app:/app/app
      - ${HOME}/.aws:/home/appuser/.aws:ro  # Mount AWS credentials folder (read-only)
      - ./k3s_data/kubeconfig:/app/k3s_data/kubeconfig:ro  # Mount K3s kubeconfig
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - sre-bot-network
    depends_on:
      k3s-server:
        condition: service_healthy

  # Web Service - Web UI with CORS and static files
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sre-bot-web
    environment:
      - SERVICE_MODE=web
      - PORT=8001
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_PROFILE=${AWS_PROFILE:-}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - BEDROCK_MODEL_ID=${BEDROCK_MODEL_ID:-anthropic.claude-3-5-sonnet-20241022-v2:0}
      - SESSION_STORAGE_PATH=/app/sessions
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - KUBECONFIG=${KUBECONFIG:-}
    ports:
      - "8001:8001"
    volumes:
      - ./sessions:/app/sessions
      - ./app:/app/app
      - ${HOME}/.aws:/home/appuser/.aws:ro  # Mount AWS credentials folder (read-only)
      - ./k3s_data/kubeconfig:/app/k3s_data/kubeconfig:ro  # Mount K3s kubeconfig
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - sre-bot-network
    depends_on:
      - api
      - k3s-server

networks:
  sre-bot-network:
    driver: bridge

volumes:
  sessions:
    driver: local
  k3s-server:
    driver: local
